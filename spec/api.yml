openapi: 3.0.0
info:
  title: Bonsai REST API
  description: >-
    Bonsai API requires you to provide the following headers:


    # Authentication


    All requests are required to contain the following headers.


    | Header | Value |

    | --- | --- |

    | Content-Type | application/json |

    | API-Key |  |


    **About authentication**  

    All API requests are authorized by passing along an API Key using HTTP
    header `API-Key`. Requests that don’t contain that header will return a `401
    Unauthorized response.`.


    These credentials will be **provided to you** by your **account manager.**


    # Testing


    In order to test the **end to end flow**, all requests should be toward the
    staging environment. You can use [Stripe test
    tokens](https://stripe.com/docs/testing#testing-interactively) to test the
    different cases.


    Please contact your account manager to provide you with:


    - Test Stripe API public key

    - An API key
        

    Please let your account manager know about the testing as we actively update
    our API, and that might impact your testing. We are aiming to keep our APIs
    backwards-compatible at all times, but we do not have versioning enabled
    yet.
  version: 1.0.0
servers:
  - url: https://api.shopbonsai.ca
    description: Production environment
  - url: https://api.staging.shopbonsai.ca
    description: Staging environment
tags:
  - name: Products
  - name: Order
  - name: Product collections
    description: >-
      Product collections can store a list of product IDs related to a unique
      handle.
  - name: Product catalog
    description: >-
      ## Product Catalog Access


      Product catalogs are hosted on `aws` as `csv`.


      ### Setup


      Before we start, you need to prepare aws credentials and aws cli.


      ⚠️ All aws credentials will be shared with you via your account manager,


      ⚠️ If you’re new to aws, please follow the following docs to install the
      [aws
      cli](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html).


      You should have access to the following credentials


      - access_id

      - secret

      - bucket_name
          

      ### Configuration


      Now that you have the credentials and the aws cli installed, we can
      configure it to get access to the feeds.


      Please follow these instructions to get access to the catalogs.


      ``` bash

      aws configure // use access_id and secret


      ```


      ### Bucket access


      You should now have access to the bucket


      ``` bash

      // List contents of the bucket

      > aws s3 ls s3://{bucket_name}

      // Copy one of the feeds

      // Downloading the file through CLI will pull a gzipped version, you'll
      need to `gunzip` the result.

      > aws s3 cp 's3://{bucked_name}/xxxx.csv' - | gunzip > xxxx.csv


      ```
paths:
  /products:
    get:
      tags:
        - Products
      summary: Products
      description: >-
        Fetch the latest product information for one or more product(s).


        ### Important note


        If no matching products are found, this will **not result in an error**
        but rather an empty `[]` being returned. This allows you to handle this
        situation how you see fit.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Only allowed content-type
          example: application/json
        - name: API-Key
          in: header
          schema:
            type: string
          description: API key provided by your account manager
          example: <secret>
        - name: ids
          in: query
          schema:
            type: string
          description: List of product IDs separated by comma
          example: clad6pg5z00eu012gfz7hfm92,cl636eezq000f014yb0dk98vv
        - name: currency
          in: query
          schema:
            type: string
          example: USD
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                meta:
                  type: products
                  count: 1
                  totalCount: 1
                data:
                  - id: cjzyvpa9n0028rns52mx4csz7
                    name: Sample Sale Aleksandra Top in Baby Stripe
                    description:
                      isRaw: true
                      raw: With ruched sleeve detailing and neckline, ...
                      sections: []
                    brand:
                      publicId: cke9ksj3p00lmjhzogqekgg8m
                      logo:
                        url: https://sharpener.shopbonsai.ca/i/dY3FcEr1O.jpg
                        format: image/jpeg
                        width: 400
                        height: 400
                        size: 12027
                        contentfulId: 5sjtY2BwAg8gmOIg06a2qu
                        deprecatedUrl: >-
                          //images.ctfassets.net/hhq3zxylfx2l/5sjtY2BwAg8gmOIg06a2qu/c43478255e4451fb9101e17be16aeaee/Whimsy_and_Row.jpg
                      name: Whimsy and Row
                    variants:
                      - id: '12513662206053'
                        inventoryQuantity: 0
                        inventory: 0
                        sku: WRT48R2
                        price: 16
                        compareAtPrice: 72
                        options:
                          - type: size
                            value: XS
                        images: []
                      - id: '12513662304357'
                        inventoryQuantity: 0
                        inventory: 0
                        sku: WRT48R2
                        price: 16
                        compareAtPrice: 72
                        options:
                          - type: size
                            value: L
                        images: []
                    images:
                      - url: https://sharpener.shopbonsai.ca/i/DPHcpEyuI.jpg
                        width: null
                        height: null
                    publicId: cjzyvpa9n0028rns52mx4csz7
                    unavailable: true
                    type: Top
                    hasFreeShipping: true
                    reviews:
                      totalRatings: null
                      starRating: null
                    merchantCountry: US
                    isAfterpayEligible: false
                    currency: USD
                    merchant:
                      publicId: ck1icomas001vdrs55hl95uou
                      name: Whimsy and Row
  /orders/checkout:
    post:
      tags:
        - Order
      summary: Checkout
      description: >-
        Perform a checkout to calculate shipping, taxes and other costs. **This
        does not persist any order information**


        ## Errors


        Errors are returned with status code 200, containing the error inside
        the errors array. This is in order to allow greater interoperability
        with integrators.


        | **Reason**                          | **Code**                     |

        |-------------------------------------|------------------------------|

        | Merchant does not ship to country   | INTERNATIONAL_SHIPPING_ERROR |

        | Product not found                   | PRODUCT_DOES_NOT_EXIST       |

        | Variant not found                   | PRODUCT_UNAVAILABLE          |

        | Fields are missing from the request | INVALID_INPUT                |

        | Invalid province code given         | PROVINCE_UNRECOGNIZED        |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Only allowed content-type
          example: application/json
        - name: API-Key
          in: header
          schema:
            type: string
          description: API key provided by your account manager
          example: <secret>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: With Address - 200 OK
                  value:
                    data:
                      subtotal: 8.29
                      tax: 1.08
                      shipping:
                        - amount: 0
                          label: (3-7 Business Days)
                          code: '0'
                          merchant_name: Hat Club
                      total: 9.37
                      duties: 0
                      line_items:
                        - public_id: cjzyvxtm407z4rns56tif8job
                          variant_id: '36619342857'
                          inventory: 1
                          price: 8.29
                          quantity: 1
                          name: '''Maraschino'' Black Hat - Test'
                      currency: USD
                      shipping_total: 0
                    errors: []
                example-1:
                  summary: Without Address - 200 OK
                  value:
                    data:
                      subtotal: 8.29
                      tax: 0
                      shipping:
                        - amount: 0
                          merchant_name: Hat Club
                      total: 8.29
                      duties: 0
                      line_items:
                        - public_id: cjzyvxtm407z4rns56tif8job
                          variant_id: '36619342857'
                          inventory: 1
                          price: 8.29
                          quantity: 1
                          name: '''Maraschino'' Black Hat'
                      currency: USD
                      shipping_total: 0
                    errors: []
  /orders/submit:
    post:
      tags:
        - Order
      summary: Order
      description: >-
        Place an order through Bonsai's API.



        ## Requirements

        - The information in the field `products` must match what was used to
        validate the product in the checkout request.

        - The information in the field `shipping_address` should match what was
        used to validate the address in the checkout request.

        - Email should be a valid email address used by the customer 



        ## Errors


        Errors are returned with status code 200, containing the error inside
        the errors array. This is in order to allow greater interoperability
        with integrators.


        | **Reason**                                 |
        **Code**                     | **HTTP Code**        |

        |--------------------------------------------|------------------------------|----------------------|

        | Merchant does not ship to country          |
        INTERNATIONAL_SHIPPING_ERROR | 400 Bad Request      |

        | Fields are missing from the request        |
        INVALID_INPUT                | 400 Bad Request      |

        | Not enough inventory                       |
        INSUFFICIENT_INVENTORY       | 400 Bad Request      |

        | Merchant does not ship to country          |
        INTERNATIONAL_SHIPPING_ERROR | 400 Bad Request      |

        | Product does not exist                     |
        PRODUCT_DOES_NOT_EXIST       | 404 Not Found        |

        | Variant does not exist                     |
        VARIANT_DOES_NOT_EXIST       | 404 Not Found        |

        | The token failed to pass Stripe validation |
        STRIPE_ERROR                 | 402 Payment Required |



        > For all possible Stripe errors, please refer to
        [https://stripe.com/docs/error-codes](https://stripe.com/docs/error-codes).
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"customer\": {\n        \"first_name\": \"<First
                name>\",\n        \"last_name\": \"<Last name>\",\n       
                \"email\": \"<Email address>\"\n    },\n    \"stripe_token\":
                \"<Stripe token>\",\n    \"products\": [\n        {\n           
                \"public_id\": \"<product ID>\",\n            \"variant_id\":
                \"<product variant ID>\",\n            \"quantity\": 1\n       
                }\n    ],\n    \"shipping_address\": {\n        \"first_name\":
                \"<First name>\",\n        \"last_name\": \"<Last
                name>\",\n        \"name\": \"<Full name>\",\n       
                \"address1\": \"<Address line>\",\n        \"address2\":
                \"<Optional>\",\n        \"city\": \"<City name>\",\n       
                \"country\": \"<Two-letter Alpha-2 ISO 3166 country
                code>\",\n        \"province\": \"<Province>\",\n       
                \"phone\": \"<Phone number>\",\n        \"zip\": \"<Zip
                code>\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Only allowed content-type
          example: application/json
        - name: API-Key
          in: header
          schema:
            type: string
          description: API key provided by your account manager
          example: <secret>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  email: bob.bobsen@gmail.com
                  shipping_address:
                    first_name: Bob
                    last_name: Bobsen
                    address1: 711 - 126 Redpath Ave
                    address2: null
                    city: Toronto
                    country: CA
                    name: Bob Bobsen
                    province: 'ON'
                    phone: 555-625-1199
                    zip: M4S0B5
                  shipping_lines:
                    - code: null
                      title: CA Flat Rate Shipping
                      price: null
                      source: Merchant provided flat rate shipping
                  line_items:
                    - name: '''Maraschino'' Black Hat - Test'
                      product_id: cjzyvxtm407z4rns56tif8job
                      public_id: cjzyvxtm407z4rns56tif8job
                      variant_id: '36619342857'
                      price: 8.29
                      quantity: 1
                      requires_shipping: true
                      properties: []
                  total_tax: 0
                  total_price: 0
                  total_duties: 0
                  public_id: cl1c6rxhl000501mx06608w2q
                  partner_id: ckzcypy340001kj1q9ud85fu0
                  orderNumber: 210631
                  stripeClientSecrets: null
                errors: []
  /orders/V1/submit:
    post:
      tags:
        - Order
      summary: Order - External Payment
      description: >-
        Place an order through Bonsai's API - External payment method.


        Partners who have access to our own Product Catalog and charge customers
        directly could use this endpoint to create/fulfill orders.


        ## Requirements


        ⚠️ This endpoint is available to select partners, please reach out to
        your account manager to discuss the API integration details


        - The information in the field `products` must match what was used to
        validate the product in the checkout request.

        - The information in the field `shipping_address` should match what was
        used to validate the address in the checkout request.

        - Email should be a valid email address used by the customer

        - Token should link to your own internal order
            - This token is used to verify the order status in your system for security reasons.
        - Amounts are the costs charged to the customer

        - you can provide any additional data in `misc.data`

        - This endpoint is only available to servers for security reasons
            

        ## Errors


        Errors are returned with status code 200, containing the error inside
        the errors array. This is in order to allow greater interoperability
        with integrators.


        | **Reason** | **Code** | **HTTP Code** |

        | --- | --- | --- |

        | Merchant does not ship to country | INTERNATIONAL_SHIPPING_ERROR | 400
        Bad Request |

        | Fields are missing from the request | INVALID_INPUT | 400 Bad Request
        |

        | Not enough inventory | INSUFFICIENT_INVENTORY | 400 Bad Request |

        | Merchant does not ship to country | INTERNATIONAL_SHIPPING_ERROR | 400
        Bad Request |

        | Product does not exist | PRODUCT_DOES_NOT_EXIST | 404 Not Found |

        | Variant does not exist | VARIANT_DOES_NOT_EXIST | 404 Not Found |

        | Failed to verify the provided token | PAYMENT_REQUIRED | 402 Payment
        Required |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                customer:
                  first_name: <First name>
                  last_name: <Last name>
                  email: <Email address>
                products:
                  - public_id: <product ID>
                    variant_id: <product variant ID>
                    quantity: 1
                shipping_address:
                  first_name: <First name>
                  last_name: <Last name>
                  name: <Full name>
                  address1: <Address line>
                  address2: <Optional>
                  city: <City name>
                  country: <Two-letter Alpha-2 ISO 3166 country code>
                  province: <Province>
                  phone: <Phone number>
                  zip: <Zip code>
                payment:
                  method: external payment
                  token: <Token>
                  amounts:
                    shipping: <Shipping cost>
                    taxes: <Taxes cost>
                    goods: <Goods cost>
                misc:
                  data: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Only allowed content-type
          example: application/json
        - name: API-Key
          in: header
          schema:
            type: string
          description: API key provided by your account manager
          example: <secret>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  email: bob.bobsen@gmail.com
                  shipping_address:
                    first_name: Bob
                    last_name: Bobsen
                    address1: 711 - 126 Redpath Ave
                    address2: null
                    city: Toronto
                    country: CA
                    name: Bob Bobsen
                    province: 'ON'
                    phone: 555-625-1199
                    zip: M4S0B5
                  shipping_lines:
                    - code: null
                      title: CA Flat Rate Shipping
                      price: null
                      source: Merchant provided flat rate shipping
                  line_items:
                    - name: '''Maraschino'' Black Hat - Test'
                      product_id: cjzyvxtm407z4rns56tif8job
                      public_id: cjzyvxtm407z4rns56tif8job
                      variant_id: '36619342857'
                      price: 8.29
                      quantity: 1
                      requires_shipping: true
                      properties: []
                  total_tax: 0
                  total_price: 0
                  total_duties: 0
                  public_id: cl1c6rxhl000501mx06608w2q
                  partner_id: ckzcypy340001kj1q9ud85fu0
                  orderNumber: 210631
                  stripeClientSecrets: null
                errors: []
  /products/collections/{handle}:
    get:
      tags:
        - Product collections
      summary: Product collection
      description: Fetch product collection information and its product IDs.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Only allowed content-type
          example: application/json
        - name: API-Key
          in: header
          schema:
            type: string
          description: API key provided by your account manager
          example: <secret>
        - name: handle
          in: path
          schema:
            type: string
          required: true
          example: <handle>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  productIds:
                    - cl8lvaax80000gvsa7tluef83
                    - cl8lvaax80000gvsa2sluef83
                  name: Favourite items
                  handle: personalItems
                  publicId: cl8lvaax80000gvsa7tluec1a
                  createdAt: '2022-09-28T16:54:03.218Z'
                  updatedAt: '2022-09-28T20:56:17.925Z'
  /i/Jt8KJPm7M.jpg:
    get:
      tags:
        - Product catalog
      summary: Download images
      parameters:
        - name: API-Key
          in: header
          schema:
            type: string
          example: <provided api key>
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
